.. Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
   HYPRE Project Developers. See the top-level COPYRIGHT file for details.

   SPDX-License-Identifier: (Apache-2.0 OR MIT)


.. _ch-MPrecision:

******************************************************************************
Mixed Precision
******************************************************************************

The hypre library has provided compile-time multi-precision support for many
years.  For example, the autotools ``--enable-single`` option or the CMake
``-DHYPRE_SINGLE=ON`` option will produce a single precision library.

Starting in hypre version 3.0, multiple precision and mixed precision support
are provided at runtime.  To turn this on with the autotools build system, use
(TODO: need to add CMake suport and documentation):

.. code-block:: bash

   configure --enable-mixed-precision

With the above, users can compile, link, and run as before without changes to
their code.  To access runtime precision, there are several levels of support
that can be used, outlined in the following sections.  We use a generic function
name ``Foo`` below for clarity.  This represents any function in hypre, e.g.,
``HYPRE_PCGSolve``.


.. _sec-MP-Fixed

Calling functions with fixed precision
==============================================================================

For every function ``Foo`` in hypre, three fixed-precision versions are also
available:

- ``Foo_flt``        (``float``)
- ``Foo_dbl``        (``double``)
- ``Foo_long_dbl``   (``long double``)

where the C types indicated in parenthesis determine the actual precisions
generated by the C compiler.  The prototypes for these new functions are exactly
the same as ``Foo``, but with real-valued arguments such as ``HYPRE_Real``
mapping to the specific C types (and precisions) indicated above.


.. _sec-MP-Multiple

Calling functions with multiple precisions
==============================================================================

Every user-API function ``Foo`` in hypre (any function beginning with the upper
case ``HYPRE_`` prefix) is also available in the mixed-precision configuration
of the library, but its precision is determined by a global runtime precision
set by calling:

.. code-block:: c

   HYPRE_SetGlobalPrecision(HYPRE_Precision precision)

where ``precision`` can be one ``HYPRE_REAL_SINGLE``, ``HYPRE_REAL_DOUBLE``, or
``HYPRE_REAL_LONGDOUBLE``.  Real-valued arguments for ``Foo`` have different
types from the functions described in :ref:`sec-MP-Fixed`, but users should
treat them the same in practice.  Specifically, real arrays (``HYPRE_Real *``)
are treated as ``void *`` and real values (``HYPRE_Real``) are treated as ``long
double``.  This provides the same functionality, but strong type checking at
compile time is no longer available.


