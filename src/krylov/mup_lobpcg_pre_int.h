
/*** DO NOT EDIT THIS FILE DIRECTLY (use ./mup_lobpcg_code to generate) ***/

/******************************************************************************
 * Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
 * HYPRE Project Developers. See the top-level COPYRIGHT file for details.
 *
 * SPDX-License-Identifier: (Apache-2.0 OR MIT)
 ******************************************************************************/


HYPRE_Int
hypre_LOBPCGDestroy_pre( HYPRE_Precision precision, void * pcg_vdata );

utilities_FortranMatrix*
hypre_LOBPCGEigenvaluesHistory_pre( HYPRE_Precision precision, void * vdata );

HYPRE_Int
hypre_LOBPCGGetPrecond_pre( HYPRE_Precision precision, void * pcg_vdata, HYPRE_Solver * precond_data_ptr );

HYPRE_Int
hypre_LOBPCGIterations_pre( HYPRE_Precision precision, void* vdata );

void
hypre_LOBPCGMultiOperatorA_pre( HYPRE_Precision precision, void * data, void * x, void* y );

void
hypre_LOBPCGMultiOperatorB_pre( HYPRE_Precision precision, void * data, void * x, void* y );

void
hypre_LOBPCGMultiPreconditioner_pre( HYPRE_Precision precision, void * data, void * x, void* y );

void
hypre_LOBPCGOperatorA_pre( HYPRE_Precision precision, void * pcg_vdata, void* x, void* y );

void
hypre_LOBPCGOperatorB_pre( HYPRE_Precision precision, void * pcg_vdata, void* x, void* y );

void
hypre_LOBPCGPreconditioner_pre( HYPRE_Precision precision, void * vdata, void* x, void* y );

utilities_FortranMatrix*
hypre_LOBPCGResidualNorms_pre( HYPRE_Precision precision, void * vdata );

utilities_FortranMatrix*
hypre_LOBPCGResidualNormsHistory_pre( HYPRE_Precision precision, void * vdata );

HYPRE_Int
hypre_LOBPCGSetMaxIter_pre( HYPRE_Precision precision, void* pcg_vdata, HYPRE_Int max_iter );

HYPRE_Int
hypre_LOBPCGSetPrecond_pre( HYPRE_Precision precision, void * pcg_vdata, hypre_KrylovPtrToPrecond precond, hypre_KrylovPtrToPrecondSetup precond_setup, void * precond_data );

HYPRE_Int
hypre_LOBPCGSetPrecondUsageMode_pre( HYPRE_Precision precision, void* pcg_vdata, HYPRE_Int mode );

HYPRE_Int
hypre_LOBPCGSetPrintLevel_pre( HYPRE_Precision precision, void * pcg_vdata, HYPRE_Int level );

HYPRE_Int
hypre_LOBPCGSetRTol_pre( HYPRE_Precision precision, void* pcg_vdata, hypre_long_double tol );

HYPRE_Int
hypre_LOBPCGSetTol_pre( HYPRE_Precision precision, void* pcg_vdata, hypre_long_double tol );

HYPRE_Int
hypre_LOBPCGSetup_pre( HYPRE_Precision precision, void * pcg_vdata, void * A, void * b, void * x );

HYPRE_Int
hypre_LOBPCGSetupB_pre( HYPRE_Precision precision, void * pcg_vdata, void * B, void * x );

HYPRE_Int
hypre_LOBPCGSetupT_pre( HYPRE_Precision precision, void * pcg_vdata, void * T, void * x );

HYPRE_Int
hypre_LOBPCGSolve_pre( HYPRE_Precision precision, void * vdata, mv_MultiVectorPtr con, mv_MultiVectorPtr vec, void * val );

HYPRE_Int
lobpcg_clean_pre( HYPRE_Precision precision, lobpcg_Data* data );

HYPRE_Int
lobpcg_initialize_pre( HYPRE_Precision precision, lobpcg_Data* data );

void
lobpcg_MultiVectorByMultiVector_pre( HYPRE_Precision precision, mv_MultiVectorPtr x, mv_MultiVectorPtr y, utilities_FortranMatrix * xy );

HYPRE_Int
lobpcg_solve_pre( HYPRE_Precision precision, mv_MultiVectorPtr blockVectorX, void* operatorAData, lobpcg_operator operatorA, void* operatorBData, lobpcg_operator operatorB, void* operatorTData, lobpcg_operator operatorT, mv_MultiVectorPtr blockVectorY, lobpcg_BLASLAPACKFunctions blap_fn, lobpcg_Tolerance tolerance, HYPRE_Int maxIterations, HYPRE_Int verbosityLevel, HYPRE_Int* iterationNumber, void * lambda_values, void * lambdaHistory_values, HYPRE_BigInt lambdaHistory_gh, void * residualNorms_values, void * residualNormsHistory_values, HYPRE_BigInt residualNormsHistory_gh );

